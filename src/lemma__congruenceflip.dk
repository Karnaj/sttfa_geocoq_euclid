thm lemma__congruenceflip :
  sttfa.eps
    (sttfa.forall
       euclidean__axioms.Point
       (A:(sttfa.eta euclidean__axioms.Point) =>
        sttfa.forall
          euclidean__axioms.Point
          (B:(sttfa.eta euclidean__axioms.Point) =>
           sttfa.forall
             euclidean__axioms.Point
             (C:(sttfa.eta euclidean__axioms.Point) =>
              sttfa.forall
                euclidean__axioms.Point
                (D:(sttfa.eta euclidean__axioms.Point) =>
                 sttfa.impl
                   (euclidean__axioms.Cong A B C D)
                   (logic.and
                      (euclidean__axioms.Cong B A D C)
                      (logic.and
                         (euclidean__axioms.Cong B A C D)
                         (euclidean__axioms.Cong A B D C))))))))
  :=
  A:(sttfa.eta euclidean__axioms.Point) =>
  B:(sttfa.eta euclidean__axioms.Point) =>
  C:(sttfa.eta euclidean__axioms.Point) =>
  D:(sttfa.eta euclidean__axioms.Point) =>
  H:(sttfa.eps (euclidean__axioms.Cong A B C D)) =>
  (H0:(sttfa.eps (euclidean__axioms.Cong B A A B)) =>
   (H1:(sttfa.eps (euclidean__axioms.Cong C D D C)) =>
    (H2:(sttfa.eps (euclidean__axioms.Cong B A C D)) =>
     (H3:(sttfa.eps (euclidean__axioms.Cong A B D C)) =>
      (H4:(sttfa.eps (euclidean__axioms.Cong B A D C)) =>
       logic.conj
         (euclidean__axioms.Cong B A D C)
         (logic.and (euclidean__axioms.Cong B A C D) (euclidean__axioms.Cong A B D C))
         H4
         (logic.conj
            (euclidean__axioms.Cong B A C D)
            (euclidean__axioms.Cong A B D C)
            H2
            H3))
        (lemma__congruencetransitive.lemma__congruencetransitive B A C D D C H2 H1))
       (lemma__congruencetransitive.lemma__congruencetransitive A B C D D C H H1))
      (lemma__congruencetransitive.lemma__congruencetransitive B A A B C D H0 H))
     (euclidean__axioms.cn__equalityreverse C D))
    (euclidean__axioms.cn__equalityreverse B A).

